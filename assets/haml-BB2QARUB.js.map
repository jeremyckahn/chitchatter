{"version":3,"file":"haml-BB2QARUB.js","sources":["../../node_modules/refractor/lang/haml.js"],"sourcesContent":["'use strict'\nvar refractorRuby = require('./ruby.js')\nmodule.exports = haml\nhaml.displayName = 'haml'\nhaml.aliases = []\nfunction haml(Prism) {\n  Prism.register(refractorRuby)\n  /* TODO\nHandle multiline code after tag\n%foo= some |\nmultiline |\ncode |\n*/\n  ;(function (Prism) {\n    Prism.languages.haml = {\n      // Multiline stuff should appear before the rest\n      'multiline-comment': {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n        lookbehind: true,\n        alias: 'comment'\n      },\n      'multiline-code': [\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        },\n        {\n          pattern:\n            /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }\n      ],\n      // See at the end of the file for known filters\n      filter: {\n        pattern:\n          /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'symbol'\n          }\n        }\n      },\n      markup: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n        lookbehind: true,\n        inside: Prism.languages.markup\n      },\n      doctype: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n        lookbehind: true\n      },\n      tag: {\n        // Allows for one nested group of braces\n        pattern:\n          /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n        lookbehind: true,\n        inside: {\n          attributes: [\n            {\n              // Lookbehind tries to prevent interpolations from breaking it all\n              // Allows for one nested group of braces\n              pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n              lookbehind: true,\n              inside: Prism.languages.ruby\n            },\n            {\n              pattern: /\\([^)]+\\)/,\n              inside: {\n                'attr-value': {\n                  pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n                  lookbehind: true\n                },\n                'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n                punctuation: /[=(),]/\n              }\n            },\n            {\n              pattern: /\\[[^\\]]+\\]/,\n              inside: Prism.languages.ruby\n            }\n          ],\n          punctuation: /[<>]/\n        }\n      },\n      code: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n        lookbehind: true,\n        inside: Prism.languages.ruby\n      },\n      // Interpolations in plain text\n      interpolation: {\n        pattern: /#\\{[^}]+\\}/,\n        inside: {\n          delimiter: {\n            pattern: /^#\\{|\\}$/,\n            alias: 'punctuation'\n          },\n          ruby: {\n            pattern: /[\\s\\S]+/,\n            inside: Prism.languages.ruby\n          }\n        }\n      },\n      punctuation: {\n        pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n        lookbehind: true\n      }\n    }\n    var filter_pattern =\n      '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+' // Non exhaustive list of available filters and associated languages\n    var filters = [\n      'css',\n      {\n        filter: 'coffee',\n        language: 'coffeescript'\n      },\n      'erb',\n      'javascript',\n      'less',\n      'markdown',\n      'ruby',\n      'scss',\n      'textile'\n    ]\n    var all_filters = {}\n    for (var i = 0, l = filters.length; i < l; i++) {\n      var filter = filters[i]\n      filter =\n        typeof filter === 'string'\n          ? {\n              filter: filter,\n              language: filter\n            }\n          : filter\n      if (Prism.languages[filter.language]) {\n        all_filters['filter-' + filter.filter] = {\n          pattern: RegExp(\n            filter_pattern.replace('{{filter_name}}', function () {\n              return filter.filter\n            })\n          ),\n          lookbehind: true,\n          inside: {\n            'filter-name': {\n              pattern: /^:[\\w-]+/,\n              alias: 'symbol'\n            },\n            text: {\n              pattern: /[\\s\\S]+/,\n              alias: [filter.language, 'language-' + filter.language],\n              inside: Prism.languages[filter.language]\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.insertBefore('haml', 'filter', all_filters)\n  })(Prism)\n}\n"],"names":["refractorRuby","require$$0","haml_1","haml","Prism","filter_pattern","filters","all_filters","i","l","filter"],"mappings":"4cACA,IAAIA,EAAgBC,EAAA,EACpBC,EAAiBC,EACjBA,EAAK,YAAc,OACnBA,EAAK,QAAU,CAAA,EACf,SAASA,EAAKC,EAAO,CACnBA,EAAM,SAASJ,CAAa,EAO1B,SAAUI,EAAO,CACjBA,EAAM,UAAU,KAAO,CAErB,oBAAqB,CACnB,QACE,gEACF,WAAY,GACZ,MAAO,WAET,iBAAkB,CAChB,CACE,QACE,6GACF,WAAY,GACZ,OAAQA,EAAM,UAAU,MAE1B,CACE,QACE,sFACF,WAAY,GACZ,OAAQA,EAAM,UAAU,IAClC,GAGM,OAAQ,CACN,QACE,iFACF,WAAY,GACZ,OAAQ,CACN,cAAe,CACb,QAAS,WACT,MAAO,QACnB,CACA,GAEM,OAAQ,CACN,QAAS,4BACT,WAAY,GACZ,OAAQA,EAAM,UAAU,QAE1B,QAAS,CACP,QAAS,oCACT,WAAY,IAEd,IAAK,CAEH,QACE,sGACF,WAAY,GACZ,OAAQ,CACN,WAAY,CACV,CAGE,QAAS,mCACT,WAAY,GACZ,OAAQA,EAAM,UAAU,MAE1B,CACE,QAAS,YACT,OAAQ,CACN,aAAc,CACZ,QAAS,0CACT,WAAY,IAEd,YAAa,4BACb,YAAa,QAC7B,GAEY,CACE,QAAS,aACT,OAAQA,EAAM,UAAU,IACtC,GAEU,YAAa,MACvB,GAEM,KAAM,CACJ,QAAS,0CACT,WAAY,GACZ,OAAQA,EAAM,UAAU,MAG1B,cAAe,CACb,QAAS,aACT,OAAQ,CACN,UAAW,CACT,QAAS,WACT,MAAO,eAET,KAAM,CACJ,QAAS,UACT,OAAQA,EAAM,UAAU,IACpC,CACA,GAEM,YAAa,CACX,QAAS,kCACT,WAAY,EACpB,CACA,EAkBI,QAjBIC,EACF,uGACEC,EAAU,CACZ,MACA,CACE,OAAQ,SACR,SAAU,gBAEZ,MACA,aACA,OACA,WACA,OACA,OACA,SACN,EACQC,EAAc,CAAA,EACTC,EAAI,EAAGC,EAAIH,EAAQ,OAAQE,EAAIC,EAAGD,IAAK,CAC9C,IAAIE,EAASJ,EAAQE,CAAC,EACtBE,EACE,OAAOA,GAAW,SACd,CACE,OAAQA,EACR,SAAUA,CACxB,EACYA,EACFN,EAAM,UAAUM,EAAO,QAAQ,IACjCH,EAAY,UAAYG,EAAO,MAAM,EAAI,CACvC,QAAS,OACPL,EAAe,QAAQ,kBAAmB,UAAY,CACpD,OAAOK,EAAO,MAC5B,CAAa,GAEH,WAAY,GACZ,OAAQ,CACN,cAAe,CACb,QAAS,WACT,MAAO,UAET,KAAM,CACJ,QAAS,UACT,MAAO,CAACA,EAAO,SAAU,YAAcA,EAAO,QAAQ,EACtD,OAAQN,EAAM,UAAUM,EAAO,QAAQ,CACrD,CACA,CACA,EAEA,CACIN,EAAM,UAAU,aAAa,OAAQ,SAAUG,CAAW,CAC9D,EAAKH,CAAK,CACV","x_google_ignoreList":[0]}