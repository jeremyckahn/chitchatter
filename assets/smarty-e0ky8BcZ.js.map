{"version":3,"file":"smarty-e0ky8BcZ.js","sources":["../../node_modules/refractor/lang/smarty.js"],"sourcesContent":["'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = smarty\nsmarty.displayName = 'smarty'\nsmarty.aliases = []\nfunction smarty(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.smarty = {\n      comment: {\n        pattern: /^\\{\\*[\\s\\S]*?\\*\\}/,\n        greedy: true\n      },\n      'embedded-php': {\n        pattern: /^\\{php\\}[\\s\\S]*?\\{\\/php\\}/,\n        greedy: true,\n        inside: {\n          smarty: {\n            pattern: /^\\{php\\}|\\{\\/php\\}$/,\n            inside: null // see below\n          },\n          php: {\n            pattern: /[\\s\\S]+/,\n            alias: 'language-php',\n            inside: Prism.languages.php\n          }\n        }\n      },\n      string: [\n        {\n          pattern: /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"/,\n          greedy: true,\n          inside: {\n            interpolation: {\n              pattern: /\\{[^{}]*\\}|`[^`]*`/,\n              inside: {\n                'interpolation-punctuation': {\n                  pattern: /^[{`]|[`}]$/,\n                  alias: 'punctuation'\n                },\n                expression: {\n                  pattern: /[\\s\\S]+/,\n                  inside: null // see below\n                }\n              }\n            },\n            variable: /\\$\\w+/\n          }\n        },\n        {\n          pattern: /'(?:\\\\.|[^'\\\\\\r\\n])*'/,\n          greedy: true\n        }\n      ],\n      keyword: {\n        pattern: /(^\\{\\/?)[a-z_]\\w*\\b(?!\\()/i,\n        lookbehind: true,\n        greedy: true\n      },\n      delimiter: {\n        pattern: /^\\{\\/?|\\}$/,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      number: /\\b0x[\\dA-Fa-f]+|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][-+]?\\d+)?/,\n      variable: [\n        /\\$(?!\\d)\\w+/,\n        /#(?!\\d)\\w+#/,\n        {\n          pattern: /(\\.|->|\\w\\s*=)(?!\\d)\\w+\\b(?!\\()/,\n          lookbehind: true\n        },\n        {\n          pattern: /(\\[)(?!\\d)\\w+(?=\\])/,\n          lookbehind: true\n        }\n      ],\n      function: {\n        pattern: /(\\|\\s*)@?[a-z_]\\w*|\\b[a-z_]\\w*(?=\\()/i,\n        lookbehind: true\n      },\n      'attr-name': /\\b[a-z_]\\w*(?=\\s*=)/i,\n      boolean: /\\b(?:false|no|off|on|true|yes)\\b/,\n      punctuation: /[\\[\\](){}.,:`]|->/,\n      operator: [\n        /[+\\-*\\/%]|==?=?|[!<>]=?|&&|\\|\\|?/,\n        /\\bis\\s+(?:not\\s+)?(?:div|even|odd)(?:\\s+by)?\\b/,\n        /\\b(?:and|eq|gt?e|gt|lt?e|lt|mod|neq?|not|or)\\b/\n      ]\n    }\n    Prism.languages.smarty['embedded-php'].inside.smarty.inside =\n      Prism.languages.smarty\n    Prism.languages.smarty.string[0].inside.interpolation.inside.expression.inside =\n      Prism.languages.smarty\n    var string = /\"(?:\\\\.|[^\"\\\\\\r\\n])*\"|'(?:\\\\.|[^'\\\\\\r\\n])*'/\n    var smartyPattern = RegExp(\n      // comments\n      /\\{\\*[\\s\\S]*?\\*\\}/.source +\n        '|' + // php tags\n        /\\{php\\}[\\s\\S]*?\\{\\/php\\}/.source +\n        '|' + // smarty blocks\n        /\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>|\\{(?:[^{}\"']|<str>)*\\})*\\})*\\}/.source.replace(\n          /<str>/g,\n          function () {\n            return string.source\n          }\n        ),\n      'g'\n    ) // Tokenize all inline Smarty expressions\n    Prism.hooks.add('before-tokenize', function (env) {\n      var smartyLiteralStart = '{literal}'\n      var smartyLiteralEnd = '{/literal}'\n      var smartyLiteralMode = false\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'smarty',\n        smartyPattern,\n        function (match) {\n          // Smarty tags inside {literal} block are ignored\n          if (match === smartyLiteralEnd) {\n            smartyLiteralMode = false\n          }\n          if (!smartyLiteralMode) {\n            if (match === smartyLiteralStart) {\n              smartyLiteralMode = true\n            }\n            return true\n          }\n          return false\n        }\n      )\n    }) // Re-insert the tokens after tokenizing\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'smarty')\n    })\n  })(Prism)\n}\n"],"names":["refractorMarkupTemplating","require$$0","smarty_1","smarty","Prism","string","smartyPattern","env","smartyLiteralStart","smartyLiteralEnd","smartyLiteralMode","match"],"mappings":"ydACA,IAAIA,EAA4BC,EAAA,EAChCC,EAAiBC,EACjBA,EAAO,YAAc,SACrBA,EAAO,QAAU,CAAA,EACjB,SAASA,EAAOC,EAAO,CACrBA,EAAM,SAASJ,CAAyB,EACtC,SAAUI,EAAO,CACjBA,EAAM,UAAU,OAAS,CACvB,QAAS,CACP,QAAS,oBACT,OAAQ,IAEV,eAAgB,CACd,QAAS,4BACT,OAAQ,GACR,OAAQ,CACN,OAAQ,CACN,QAAS,sBACT,OAAQ,MAEV,IAAK,CACH,QAAS,UACT,MAAO,eACP,OAAQA,EAAM,UAAU,GACpC,CACA,GAEM,OAAQ,CACN,CACE,QAAS,wBACT,OAAQ,GACR,OAAQ,CACN,cAAe,CACb,QAAS,qBACT,OAAQ,CACN,4BAA6B,CAC3B,QAAS,cACT,MAAO,eAET,WAAY,CACV,QAAS,UACT,OAAQ,IAC1B,CACA,GAEY,SAAU,OACtB,GAEQ,CACE,QAAS,wBACT,OAAQ,EAClB,GAEM,QAAS,CACP,QAAS,6BACT,WAAY,GACZ,OAAQ,IAEV,UAAW,CACT,QAAS,aACT,OAAQ,GACR,MAAO,eAET,OAAQ,+DACR,SAAU,CACR,cACA,cACA,CACE,QAAS,kCACT,WAAY,IAEd,CACE,QAAS,sBACT,WAAY,EACtB,GAEM,SAAU,CACR,QAAS,wCACT,WAAY,IAEd,YAAa,uBACb,QAAS,mCACT,YAAa,oBACb,SAAU,CACR,mCACA,iDACA,gDACR,CACA,EACIA,EAAM,UAAU,OAAO,cAAc,EAAE,OAAO,OAAO,OACnDA,EAAM,UAAU,OAClBA,EAAM,UAAU,OAAO,OAAO,CAAC,EAAE,OAAO,cAAc,OAAO,WAAW,OACtEA,EAAM,UAAU,OAClB,IAAIC,EAAS,8CACTC,EAAgB,OAElB,mBAAmB,OACjB,IACA,2BAA2B,OAC3B,IACA,uEAAuE,OAAO,QAC5E,SACA,UAAY,CACV,OAAOD,EAAO,MAC1B,GAEM,KAEFD,EAAM,MAAM,IAAI,kBAAmB,SAAUG,EAAK,CAChD,IAAIC,EAAqB,YACrBC,EAAmB,aACnBC,EAAoB,GACxBN,EAAM,UAAU,mBAAmB,EAAE,kBACnCG,EACA,SACAD,EACA,SAAUK,EAAO,CAKf,OAHIA,IAAUF,IACZC,EAAoB,IAEjBA,EAME,IALDC,IAAUH,IACZE,EAAoB,IAEf,GAGnB,CACA,CACA,CAAK,EACDN,EAAM,MAAM,IAAI,iBAAkB,SAAUG,EAAK,CAC/CH,EAAM,UAAU,mBAAmB,EAAE,qBAAqBG,EAAK,QAAQ,CAC7E,CAAK,CACL,EAAKH,CAAK,CACV","x_google_ignoreList":[0]}