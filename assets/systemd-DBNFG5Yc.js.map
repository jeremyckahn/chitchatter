{"version":3,"file":"systemd-DBNFG5Yc.js","sources":["../../node_modules/refractor/lang/systemd.js"],"sourcesContent":["'use strict'\n\nmodule.exports = systemd\nsystemd.displayName = 'systemd'\nsystemd.aliases = []\nfunction systemd(Prism) {\n  // https://www.freedesktop.org/software/systemd/man/systemd.syntax.html\n  ;(function (Prism) {\n    var comment = {\n      pattern: /^[;#].*/m,\n      greedy: true\n    }\n    var quotesSource = /\"(?:[^\\r\\n\"\\\\]|\\\\(?:[^\\r]|\\r\\n?))*\"(?!\\S)/.source\n    Prism.languages.systemd = {\n      comment: comment,\n      section: {\n        pattern: /^\\[[^\\n\\r\\[\\]]*\\](?=[ \\t]*$)/m,\n        greedy: true,\n        inside: {\n          punctuation: /^\\[|\\]$/,\n          'section-name': {\n            pattern: /[\\s\\S]+/,\n            alias: 'selector'\n          }\n        }\n      },\n      key: {\n        pattern: /^[^\\s=]+(?=[ \\t]*=)/m,\n        greedy: true,\n        alias: 'attr-name'\n      },\n      value: {\n        // This pattern is quite complex because of two properties:\n        //  1) Quotes (strings) must be preceded by a space. Since we can't use lookbehinds, we have to \"resolve\"\n        //     the lookbehind. You will see this in the main loop where spaces are handled separately.\n        //  2) Line continuations.\n        //     After line continuations, empty lines and comments are ignored so we have to consume them.\n        pattern: RegExp(\n          /(=[ \\t]*(?!\\s))/.source + // the value either starts with quotes or not\n            '(?:' +\n            quotesSource +\n            '|(?=[^\"\\r\\n]))' + // main loop\n            '(?:' +\n            (/[^\\s\\\\]/.source + // handle spaces separately because of quotes\n              '|' +\n              '[ \\t]+(?:(?![ \\t\"])|' +\n              quotesSource +\n              ')' + // line continuation\n              '|' +\n              /\\\\[\\r\\n]+(?:[#;].*[\\r\\n]+)*(?![#;])/.source) +\n            ')*'\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'attr-value',\n        inside: {\n          comment: comment,\n          quoted: {\n            pattern: RegExp(/(^|\\s)/.source + quotesSource),\n            lookbehind: true,\n            greedy: true\n          },\n          punctuation: /\\\\$/m,\n          boolean: {\n            pattern: /^(?:false|no|off|on|true|yes)$/,\n            greedy: true\n          }\n        }\n      },\n      punctuation: /=/\n    }\n  })(Prism)\n}\n"],"names":["systemd_1","systemd","Prism","comment","quotesSource"],"mappings":"qaAEAA,EAAiBC,EACjBA,EAAQ,YAAc,UACtBA,EAAQ,QAAU,CAAA,EAClB,SAASA,EAAQC,EAAO,EAEpB,SAAUA,EAAO,CACjB,IAAIC,EAAU,CACZ,QAAS,WACT,OAAQ,EACd,EACQC,EAAe,4CAA4C,OAC/DF,EAAM,UAAU,QAAU,CACxB,QAASC,EACT,QAAS,CACP,QAAS,gCACT,OAAQ,GACR,OAAQ,CACN,YAAa,UACb,eAAgB,CACd,QAAS,UACT,MAAO,UACnB,CACA,GAEM,IAAK,CACH,QAAS,uBACT,OAAQ,GACR,MAAO,aAET,MAAO,CAML,QAAS,OACP,kBAAkB,OAChB,MACAC,EACA;AAAA,SAEC,UAAU,OACT,sBAEAA,EACA,KAEA,sCAAsC,QACxC,MAEJ,WAAY,GACZ,OAAQ,GACR,MAAO,aACP,OAAQ,CACN,QAASD,EACT,OAAQ,CACN,QAAS,OAAO,SAAS,OAASC,CAAY,EAC9C,WAAY,GACZ,OAAQ,IAEV,YAAa,OACb,QAAS,CACP,QAAS,iCACT,OAAQ,EACpB,CACA,GAEM,YAAa,GACnB,CACA,GAAKF,CAAK,CACV","x_google_ignoreList":[0]}