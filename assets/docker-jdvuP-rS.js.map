{"version":3,"file":"docker-jdvuP-rS.js","sources":["../../node_modules/refractor/lang/docker.js"],"sourcesContent":["'use strict'\n\nmodule.exports = docker\ndocker.displayName = 'docker'\ndocker.aliases = ['dockerfile']\nfunction docker(Prism) {\n  ;(function (Prism) {\n    // Many of the following regexes will contain negated lookaheads like `[ \\t]+(?![ \\t])`. This is a trick to ensure\n    // that quantifiers behave *atomically*. Atomic quantifiers are necessary to prevent exponential backtracking.\n    var spaceAfterBackSlash =\n      /\\\\[\\r\\n](?:\\s|\\\\[\\r\\n]|#.*(?!.))*(?![\\s#]|\\\\[\\r\\n])/.source // At least one space, comment, or line break\n    var space = /(?:[ \\t]+(?![ \\t])(?:<SP_BS>)?|<SP_BS>)/.source.replace(\n      /<SP_BS>/g,\n      function () {\n        return spaceAfterBackSlash\n      }\n    )\n    var string =\n      /\"(?:[^\"\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*\"|'(?:[^'\\\\\\r\\n]|\\\\(?:\\r\\n|[\\s\\S]))*'/\n        .source\n    var option = /--[\\w-]+=(?:<STR>|(?![\"'])(?:[^\\s\\\\]|\\\\.)+)/.source.replace(\n      /<STR>/g,\n      function () {\n        return string\n      }\n    )\n    var stringRule = {\n      pattern: RegExp(string),\n      greedy: true\n    }\n    var commentRule = {\n      pattern: /(^[ \\t]*)#.*/m,\n      lookbehind: true,\n      greedy: true\n    }\n    /**\n     * @param {string} source\n     * @param {string} flags\n     * @returns {RegExp}\n     */\n    function re(source, flags) {\n      source = source\n        .replace(/<OPT>/g, function () {\n          return option\n        })\n        .replace(/<SP>/g, function () {\n          return space\n        })\n      return RegExp(source, flags)\n    }\n    Prism.languages.docker = {\n      instruction: {\n        pattern:\n          /(^[ \\t]*)(?:ADD|ARG|CMD|COPY|ENTRYPOINT|ENV|EXPOSE|FROM|HEALTHCHECK|LABEL|MAINTAINER|ONBUILD|RUN|SHELL|STOPSIGNAL|USER|VOLUME|WORKDIR)(?=\\s)(?:\\\\.|[^\\r\\n\\\\])*(?:\\\\$(?:\\s|#.*$)*(?![\\s#])(?:\\\\.|[^\\r\\n\\\\])*)*/im,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          options: {\n            pattern: re(\n              /(^(?:ONBUILD<SP>)?\\w+<SP>)<OPT>(?:<SP><OPT>)*/.source,\n              'i'\n            ),\n            lookbehind: true,\n            greedy: true,\n            inside: {\n              property: {\n                pattern: /(^|\\s)--[\\w-]+/,\n                lookbehind: true\n              },\n              string: [\n                stringRule,\n                {\n                  pattern: /(=)(?![\"'])(?:[^\\s\\\\]|\\\\.)+/,\n                  lookbehind: true\n                }\n              ],\n              operator: /\\\\$/m,\n              punctuation: /=/\n            }\n          },\n          keyword: [\n            {\n              // https://docs.docker.com/engine/reference/builder/#healthcheck\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?HEALTHCHECK<SP>(?:<OPT><SP>)*)(?:CMD|NONE)\\b/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#from\n              pattern: re(\n                /(^(?:ONBUILD<SP>)?FROM<SP>(?:<OPT><SP>)*(?!--)[^ \\t\\\\]+<SP>)AS/\n                  .source,\n                'i'\n              ),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              // https://docs.docker.com/engine/reference/builder/#onbuild\n              pattern: re(/(^ONBUILD<SP>)\\w+/.source, 'i'),\n              lookbehind: true,\n              greedy: true\n            },\n            {\n              pattern: /^\\w+/,\n              greedy: true\n            }\n          ],\n          comment: commentRule,\n          string: stringRule,\n          variable: /\\$(?:\\w+|\\{[^{}\"'\\\\]*\\})/,\n          operator: /\\\\$/m\n        }\n      },\n      comment: commentRule\n    }\n    Prism.languages.dockerfile = Prism.languages.docker\n  })(Prism)\n}\n"],"names":["docker_1","docker","Prism","spaceAfterBackSlash","space","string","option","stringRule","commentRule","re","source","flags"],"mappings":"qaAEAA,EAAiBC,EACjBA,EAAO,YAAc,SACrBA,EAAO,QAAU,CAAC,YAAY,EAC9B,SAASA,EAAOC,EAAO,EACnB,SAAUA,EAAO,CAGjB,IAAIC,EACF,sDAAsD,OACpDC,EAAQ,0CAA0C,OAAO,QAC3D,WACA,UAAY,CACV,OAAOD,CACf,CACA,EACQE,EACF,0EACG,OACDC,EAAS,8CAA8C,OAAO,QAChE,SACA,UAAY,CACV,OAAOD,CACf,CACA,EACQE,EAAa,CACf,QAAS,OAAOF,CAAM,EACtB,OAAQ,EACd,EACQG,EAAc,CAChB,QAAS,gBACT,WAAY,GACZ,OAAQ,EACd,EAMI,SAASC,EAAGC,EAAQC,EAAO,CACzB,OAAAD,EAASA,EACN,QAAQ,SAAU,UAAY,CAC7B,OAAOJ,CACjB,CAAS,EACA,QAAQ,QAAS,UAAY,CAC5B,OAAOF,CACjB,CAAS,EACI,OAAOM,EAAQC,CAAK,CACjC,CACIT,EAAM,UAAU,OAAS,CACvB,YAAa,CACX,QACE,kNACF,WAAY,GACZ,OAAQ,GACR,OAAQ,CACN,QAAS,CACP,QAASO,EACP,gDAAgD,OAChD,KAEF,WAAY,GACZ,OAAQ,GACR,OAAQ,CACN,SAAU,CACR,QAAS,iBACT,WAAY,IAEd,OAAQ,CACNF,EACA,CACE,QAAS,8BACT,WAAY,EAC9B,GAEc,SAAU,OACV,YAAa,GAC3B,GAEU,QAAS,CACP,CAEE,QAASE,EACP,iEACG,OACH,KAEF,WAAY,GACZ,OAAQ,IAEV,CAEE,QAASA,EACP,iEACG,OACH,KAEF,WAAY,GACZ,OAAQ,IAEV,CAEE,QAASA,EAAG,oBAAoB,OAAQ,GAAG,EAC3C,WAAY,GACZ,OAAQ,IAEV,CACE,QAAS,OACT,OAAQ,EACtB,GAEU,QAASD,EACT,OAAQD,EACR,SAAU,2BACV,SAAU,MACpB,GAEM,QAASC,CACf,EACIN,EAAM,UAAU,WAAaA,EAAM,UAAU,MACjD,GAAKA,CAAK,CACV","x_google_ignoreList":[0]}