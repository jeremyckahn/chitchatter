{"version":3,"file":"markup-templating-BxAVv-bL.js","sources":["../../node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function (Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function (env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function (match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            ) {\n              ++i\n            } // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function (env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"names":["markupTemplating_1","markupTemplating","Prism","getPlaceholder","language","index","env","placeholderPattern","replaceFilter","tokenStack","match","placeholder","j","keys","walkTokens","tokens","token","k","t","s","before","middle","after","replacement"],"mappings":"uCAEAA,EAAiBC,EACjBA,EAAiB,YAAc,mBAC/BA,EAAiB,QAAU,CAAA,EAC3B,SAASA,EAAiBC,EAAO,EAC7B,SAAUA,EAAO,CAQjB,SAASC,EAAeC,EAAUC,EAAO,CACvC,MAAO,MAAQD,EAAS,YAAW,EAAKC,EAAQ,KACtD,CACI,OAAO,iBAAkBH,EAAM,UAAU,mBAAmB,EAAI,CAAA,EAAK,CACnE,kBAAmB,CAYjB,MAAO,SAAUI,EAAKF,EAAUG,EAAoBC,EAAe,CACjE,GAAIF,EAAI,WAAaF,EAGrB,KAAIK,EAAcH,EAAI,WAAa,CAAA,EACnCA,EAAI,KAAOA,EAAI,KAAK,QAAQC,EAAoB,SAAUG,EAAO,CAC/D,GAAI,OAAOF,GAAkB,YAAc,CAACA,EAAcE,CAAK,EAC7D,OAAOA,EAIT,QAFI,EAAID,EAAW,OACfE,EAEFL,EAAI,KAAK,QAASK,EAAcR,EAAeC,EAAU,CAAC,CAAC,IAC3D,IAEA,EAAE,EAEJ,OAAAK,EAAW,CAAC,EAAIC,EACTC,CACnB,CAAW,EACDL,EAAI,QAAUJ,EAAM,UAAU,OACxC,GAEM,qBAAsB,CAOpB,MAAO,SAAUI,EAAKF,EAAU,CAC9B,GAAIE,EAAI,WAAaF,GAAY,CAACE,EAAI,WACpC,OAEFA,EAAI,QAAUJ,EAAM,UAAUE,CAAQ,EACtC,IAAIQ,EAAI,EACJC,EAAO,OAAO,KAAKP,EAAI,UAAU,EACrC,SAASQ,EAAWC,EAAQ,CAC1B,QAAS,EAAI,EAAG,EAAIA,EAAO,QAErB,EAAAH,GAAKC,EAAK,QAFmB,IAAK,CAKtC,IAAIG,EAAQD,EAAO,CAAC,EACpB,GACE,OAAOC,GAAU,UAChBA,EAAM,SAAW,OAAOA,EAAM,SAAY,SAC3C,CACA,IAAIC,EAAIJ,EAAKD,CAAC,EACVM,EAAIZ,EAAI,WAAWW,CAAC,EACpBE,EAAI,OAAOH,GAAU,SAAWA,EAAQA,EAAM,QAC9CL,EAAcR,EAAeC,EAAUa,CAAC,EACxCZ,EAAQc,EAAE,QAAQR,CAAW,EACjC,GAAIN,EAAQ,GAAI,CACd,EAAEO,EACF,IAAIQ,EAASD,EAAE,UAAU,EAAGd,CAAK,EAC7BgB,EAAS,IAAInB,EAAM,MACrBE,EACAF,EAAM,SAASgB,EAAGZ,EAAI,OAAO,EAC7B,YAAcF,EACdc,CACpB,EACsBI,EAAQH,EAAE,UAAUd,EAAQM,EAAY,MAAM,EAC9CY,EAAc,CAAA,EACdH,GACFG,EAAY,KAAK,MAAMA,EAAaT,EAAW,CAACM,CAAM,CAAC,CAAC,EAE1DG,EAAY,KAAKF,CAAM,EACnBC,GACFC,EAAY,KAAK,MAAMA,EAAaT,EAAW,CAACQ,CAAK,CAAC,CAAC,EAErD,OAAON,GAAU,SACnBD,EAAO,OAAO,MAAMA,EAAQ,CAAC,EAAG,CAAC,EAAE,OAAOQ,CAAW,CAAC,EAEtDP,EAAM,QAAUO,CAEpC,CACA,MACgBP,EAAM,SAGNF,EAAWE,EAAM,OAAO,CAExC,CACY,OAAOD,CACnB,CACUD,EAAWR,EAAI,MAAM,CAC/B,CACA,EACK,CACL,GAAKJ,CAAK,CACV","x_google_ignoreList":[0]}