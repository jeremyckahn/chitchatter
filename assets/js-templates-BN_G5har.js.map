{"version":3,"file":"js-templates-BN_G5har.js","sources":["../../node_modules/refractor/lang/js-templates.js"],"sourcesContent":["'use strict'\n\nmodule.exports = jsTemplates\njsTemplates.displayName = 'jsTemplates'\njsTemplates.aliases = []\nfunction jsTemplates(Prism) {\n  ;(function (Prism) {\n    var templateString = Prism.languages.javascript['template-string'] // see the pattern in prism-javascript.js\n    var templateLiteralPattern = templateString.pattern.source\n    var interpolationObject = templateString.inside['interpolation']\n    var interpolationPunctuationObject =\n      interpolationObject.inside['interpolation-punctuation']\n    var interpolationPattern = interpolationObject.pattern.source\n    /**\n     * Creates a new pattern to match a template string with a special tag.\n     *\n     * This will return `undefined` if there is no grammar with the given language id.\n     *\n     * @param {string} language The language id of the embedded language. E.g. `markdown`.\n     * @param {string} tag The regex pattern to match the tag.\n     * @returns {object | undefined}\n     * @example\n     * createTemplate('css', /\\bcss/.source);\n     */\n    function createTemplate(language, tag) {\n      if (!Prism.languages[language]) {\n        return undefined\n      }\n      return {\n        pattern: RegExp('((?:' + tag + ')\\\\s*)' + templateLiteralPattern),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          'template-punctuation': {\n            pattern: /^`|`$/,\n            alias: 'string'\n          },\n          'embedded-code': {\n            pattern: /[\\s\\S]+/,\n            alias: language\n          }\n        }\n      }\n    }\n    Prism.languages.javascript['template-string'] = [\n      // styled-jsx:\n      //   css`a { color: #25F; }`\n      // styled-components:\n      //   styled.h1`color: red;`\n      createTemplate(\n        'css',\n        /\\b(?:styled(?:\\([^)]*\\))?(?:\\s*\\.\\s*\\w+(?:\\([^)]*\\))*)*|css(?:\\s*\\.\\s*(?:global|resolve))?|createGlobalStyle|keyframes)/\n          .source\n      ), // html`<p></p>`\n      // div.innerHTML = `<p></p>`\n      createTemplate('html', /\\bhtml|\\.\\s*(?:inner|outer)HTML\\s*\\+?=/.source), // svg`<path fill=\"#fff\" d=\"M55.37 ...\"/>`\n      createTemplate('svg', /\\bsvg/.source), // md`# h1`, markdown`## h2`\n      createTemplate('markdown', /\\b(?:markdown|md)/.source), // gql`...`, graphql`...`, graphql.experimental`...`\n      createTemplate(\n        'graphql',\n        /\\b(?:gql|graphql(?:\\s*\\.\\s*experimental)?)/.source\n      ), // sql`...`\n      createTemplate('sql', /\\bsql/.source), // vanilla template string\n      templateString\n    ].filter(Boolean)\n    /**\n     * Returns a specific placeholder literal for the given language.\n     *\n     * @param {number} counter\n     * @param {string} language\n     * @returns {string}\n     */\n    function getPlaceholder(counter, language) {\n      return '___' + language.toUpperCase() + '_' + counter + '___'\n    }\n    /**\n     * Returns the tokens of `Prism.tokenize` but also runs the `before-tokenize` and `after-tokenize` hooks.\n     *\n     * @param {string} code\n     * @param {any} grammar\n     * @param {string} language\n     * @returns {(string|Token)[]}\n     */\n    function tokenizeWithHooks(code, grammar, language) {\n      var env = {\n        code: code,\n        grammar: grammar,\n        language: language\n      }\n      Prism.hooks.run('before-tokenize', env)\n      env.tokens = Prism.tokenize(env.code, env.grammar)\n      Prism.hooks.run('after-tokenize', env)\n      return env.tokens\n    }\n    /**\n     * Returns the token of the given JavaScript interpolation expression.\n     *\n     * @param {string} expression The code of the expression. E.g. `\"${42}\"`\n     * @returns {Token}\n     */\n    function tokenizeInterpolationExpression(expression) {\n      var tempGrammar = {}\n      tempGrammar['interpolation-punctuation'] = interpolationPunctuationObject\n      /** @type {Array} */\n      var tokens = Prism.tokenize(expression, tempGrammar)\n      if (tokens.length === 3) {\n        /**\n         * The token array will look like this\n         * [\n         *     [\"interpolation-punctuation\", \"${\"]\n         *     \"...\" // JavaScript expression of the interpolation\n         *     [\"interpolation-punctuation\", \"}\"]\n         * ]\n         */\n        var args = [1, 1]\n        args.push.apply(\n          args,\n          tokenizeWithHooks(tokens[1], Prism.languages.javascript, 'javascript')\n        )\n        tokens.splice.apply(tokens, args)\n      }\n      return new Prism.Token(\n        'interpolation',\n        tokens,\n        interpolationObject.alias,\n        expression\n      )\n    }\n    /**\n     * Tokenizes the given code with support for JavaScript interpolation expressions mixed in.\n     *\n     * This function has 3 phases:\n     *\n     * 1. Replace all JavaScript interpolation expression with a placeholder.\n     *    The placeholder will have the syntax of a identify of the target language.\n     * 2. Tokenize the code with placeholders.\n     * 3. Tokenize the interpolation expressions and re-insert them into the tokenize code.\n     *    The insertion only works if a placeholder hasn't been \"ripped apart\" meaning that the placeholder has been\n     *    tokenized as two tokens by the grammar of the embedded language.\n     *\n     * @param {string} code\n     * @param {object} grammar\n     * @param {string} language\n     * @returns {Token}\n     */\n    function tokenizeEmbedded(code, grammar, language) {\n      // 1. First filter out all interpolations\n      // because they might be escaped, we need a lookbehind, so we use Prism\n      /** @type {(Token|string)[]} */\n      var _tokens = Prism.tokenize(code, {\n        interpolation: {\n          pattern: RegExp(interpolationPattern),\n          lookbehind: true\n        }\n      }) // replace all interpolations with a placeholder which is not in the code already\n      var placeholderCounter = 0\n      /** @type {Object<string, string>} */\n      var placeholderMap = {}\n      var embeddedCode = _tokens\n        .map(function (token) {\n          if (typeof token === 'string') {\n            return token\n          } else {\n            var interpolationExpression = token.content\n            var placeholder\n            while (\n              code.indexOf(\n                (placeholder = getPlaceholder(placeholderCounter++, language))\n              ) !== -1\n            ) {\n              /* noop */\n            }\n            placeholderMap[placeholder] = interpolationExpression\n            return placeholder\n          }\n        })\n        .join('') // 2. Tokenize the embedded code\n      var embeddedTokens = tokenizeWithHooks(embeddedCode, grammar, language) // 3. Re-insert the interpolation\n      var placeholders = Object.keys(placeholderMap)\n      placeholderCounter = 0\n      /**\n       *\n       * @param {(Token|string)[]} tokens\n       * @returns {void}\n       */\n      function walkTokens(tokens) {\n        for (var i = 0; i < tokens.length; i++) {\n          if (placeholderCounter >= placeholders.length) {\n            return\n          }\n          var token = tokens[i]\n          if (typeof token === 'string' || typeof token.content === 'string') {\n            var placeholder = placeholders[placeholderCounter]\n            var s =\n              typeof token === 'string'\n                ? token\n                : /** @type {string} */\n                  token.content\n            var index = s.indexOf(placeholder)\n            if (index !== -1) {\n              ++placeholderCounter\n              var before = s.substring(0, index)\n              var middle = tokenizeInterpolationExpression(\n                placeholderMap[placeholder]\n              )\n              var after = s.substring(index + placeholder.length)\n              var replacement = []\n              if (before) {\n                replacement.push(before)\n              }\n              replacement.push(middle)\n              if (after) {\n                var afterTokens = [after]\n                walkTokens(afterTokens)\n                replacement.push.apply(replacement, afterTokens)\n              }\n              if (typeof token === 'string') {\n                tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                i += replacement.length - 1\n              } else {\n                token.content = replacement\n              }\n            }\n          } else {\n            var content = token.content\n            if (Array.isArray(content)) {\n              walkTokens(content)\n            } else {\n              walkTokens([content])\n            }\n          }\n        }\n      }\n      walkTokens(embeddedTokens)\n      return new Prism.Token(\n        language,\n        embeddedTokens,\n        'language-' + language,\n        code\n      )\n    }\n    /**\n     * The languages for which JS templating will handle tagged template literals.\n     *\n     * JS templating isn't active for only JavaScript but also related languages like TypeScript, JSX, and TSX.\n     */\n    var supportedLanguages = {\n      javascript: true,\n      js: true,\n      typescript: true,\n      ts: true,\n      jsx: true,\n      tsx: true\n    }\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (!(env.language in supportedLanguages)) {\n        return\n      }\n      /**\n       * Finds and tokenizes all template strings with an embedded languages.\n       *\n       * @param {(Token | string)[]} tokens\n       * @returns {void}\n       */\n      function findTemplateStrings(tokens) {\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (typeof token === 'string') {\n            continue\n          }\n          var content = token.content\n          if (!Array.isArray(content)) {\n            if (typeof content !== 'string') {\n              findTemplateStrings([content])\n            }\n            continue\n          }\n          if (token.type === 'template-string') {\n            /**\n             * A JavaScript template-string token will look like this:\n             *\n             * [\"template-string\", [\n             *     [\"template-punctuation\", \"`\"],\n             *     (\n             *         An array of \"string\" and \"interpolation\" tokens. This is the simple string case.\n             *         or\n             *         [\"embedded-code\", \"...\"] This is the token containing the embedded code.\n             *                                  It also has an alias which is the language of the embedded code.\n             *     ),\n             *     [\"template-punctuation\", \"`\"]\n             * ]]\n             */\n            var embedded = content[1]\n            if (\n              content.length === 3 &&\n              typeof embedded !== 'string' &&\n              embedded.type === 'embedded-code'\n            ) {\n              // get string content\n              var code = stringContent(embedded)\n              var alias = embedded.alias\n              var language = Array.isArray(alias) ? alias[0] : alias\n              var grammar = Prism.languages[language]\n              if (!grammar) {\n                // the embedded language isn't registered.\n                continue\n              }\n              content[1] = tokenizeEmbedded(code, grammar, language)\n            }\n          } else {\n            findTemplateStrings(content)\n          }\n        }\n      }\n      findTemplateStrings(env.tokens)\n    })\n    /**\n     * Returns the string content of a token or token stream.\n     *\n     * @param {string | Token | (string | Token)[]} value\n     * @returns {string}\n     */\n    function stringContent(value) {\n      if (typeof value === 'string') {\n        return value\n      } else if (Array.isArray(value)) {\n        return value.map(stringContent).join('')\n      } else {\n        return stringContent(value.content)\n      }\n    }\n  })(Prism)\n}\n"],"names":["jsTemplates_1","jsTemplates","Prism","templateString","templateLiteralPattern","interpolationObject","interpolationPunctuationObject","interpolationPattern","createTemplate","language","tag","getPlaceholder","counter","tokenizeWithHooks","code","grammar","env","tokenizeInterpolationExpression","expression","tempGrammar","tokens","args","tokenizeEmbedded","_tokens","placeholderCounter","placeholderMap","embeddedCode","token","interpolationExpression","placeholder","embeddedTokens","placeholders","walkTokens","i","s","index","before","middle","after","replacement","afterTokens","content","supportedLanguages","findTemplateStrings","l","embedded","stringContent","alias","value"],"mappings":"qaAEAA,EAAiBC,EACjBA,EAAY,YAAc,cAC1BA,EAAY,QAAU,CAAA,EACtB,SAASA,EAAYC,EAAO,EACxB,SAAUA,EAAO,CACjB,IAAIC,EAAiBD,EAAM,UAAU,WAAW,iBAAiB,EAC7DE,EAAyBD,EAAe,QAAQ,OAChDE,EAAsBF,EAAe,OAAO,cAC5CG,EACFD,EAAoB,OAAO,2BAA2B,EACpDE,EAAuBF,EAAoB,QAAQ,OAYvD,SAASG,EAAeC,EAAUC,EAAK,CACrC,GAAKR,EAAM,UAAUO,CAAQ,EAG7B,MAAO,CACL,QAAS,OAAO,OAASC,EAAM,SAAWN,CAAsB,EAChE,WAAY,GACZ,OAAQ,GACR,OAAQ,CACN,uBAAwB,CACtB,QAAS,QACT,MAAO,UAET,gBAAiB,CACf,QAAS,UACT,MAAOK,CACnB,CACA,CACA,CACA,CACIP,EAAM,UAAU,WAAW,iBAAiB,EAAI,CAK9CM,EACE,MACA,0HACG,QAGLA,EAAe,OAAQ,yCAAyC,MAAM,EACtEA,EAAe,MAAO,QAAQ,MAAM,EACpCA,EAAe,WAAY,oBAAoB,MAAM,EACrDA,EACE,UACA,6CAA6C,QAE/CA,EAAe,MAAO,QAAQ,MAAM,EACpCL,GACA,OAAO,OAAO,EAQhB,SAASQ,EAAeC,EAASH,EAAU,CACzC,MAAO,MAAQA,EAAS,YAAW,EAAK,IAAMG,EAAU,KAC9D,CASI,SAASC,EAAkBC,EAAMC,EAASN,EAAU,CAClD,IAAIO,EAAM,CACR,KAAMF,EACN,QAASC,EACT,SAAUN,CAClB,EACM,OAAAP,EAAM,MAAM,IAAI,kBAAmBc,CAAG,EACtCA,EAAI,OAASd,EAAM,SAASc,EAAI,KAAMA,EAAI,OAAO,EACjDd,EAAM,MAAM,IAAI,iBAAkBc,CAAG,EAC9BA,EAAI,MACjB,CAOI,SAASC,EAAgCC,EAAY,CACnD,IAAIC,EAAc,CAAA,EAClBA,EAAY,2BAA2B,EAAIb,EAE3C,IAAIc,EAASlB,EAAM,SAASgB,EAAYC,CAAW,EACnD,GAAIC,EAAO,SAAW,EAAG,CASvB,IAAIC,EAAO,CAAC,EAAG,CAAC,EAChBA,EAAK,KAAK,MACRA,EACAR,EAAkBO,EAAO,CAAC,EAAGlB,EAAM,UAAU,WAAY,YAAY,CAC/E,EACQkB,EAAO,OAAO,MAAMA,EAAQC,CAAI,CACxC,CACM,OAAO,IAAInB,EAAM,MACf,gBACAkB,EACAf,EAAoB,MACpBa,CACR,CACA,CAkBI,SAASI,EAAiBR,EAAMC,EAASN,EAAU,CAIjD,IAAIc,EAAUrB,EAAM,SAASY,EAAM,CACjC,cAAe,CACb,QAAS,OAAOP,CAAoB,EACpC,WAAY,EACtB,CACA,CAAO,EACGiB,EAAqB,EAErBC,EAAiB,CAAA,EACjBC,EAAeH,EAChB,IAAI,SAAUI,EAAO,CACpB,GAAI,OAAOA,GAAU,SACnB,OAAOA,EAIP,QAFIC,EAA0BD,EAAM,QAChCE,EAEFf,EAAK,QACFe,EAAclB,EAAea,IAAsBf,CAAQ,CAC5E,IAAoB,IACN,CAGF,OAAAgB,EAAeI,CAAW,EAAID,EACvBC,CAEnB,CAAS,EACA,KAAK,EAAE,EACNC,EAAiBjB,EAAkBa,EAAcX,EAASN,CAAQ,EAClEsB,EAAe,OAAO,KAAKN,CAAc,EAC7CD,EAAqB,EAMrB,SAASQ,EAAWZ,EAAQ,CAC1B,QAASa,EAAI,EAAGA,EAAIb,EAAO,OAAQa,IAAK,CACtC,GAAIT,GAAsBO,EAAa,OACrC,OAEF,IAAIJ,EAAQP,EAAOa,CAAC,EACpB,GAAI,OAAON,GAAU,UAAY,OAAOA,EAAM,SAAY,SAAU,CAClE,IAAIE,EAAcE,EAAaP,CAAkB,EAC7CU,EACF,OAAOP,GAAU,SACbA,EAEAA,EAAM,QACRQ,EAAQD,EAAE,QAAQL,CAAW,EACjC,GAAIM,IAAU,GAAI,CAChB,EAAEX,EACF,IAAIY,EAASF,EAAE,UAAU,EAAGC,CAAK,EAC7BE,EAASpB,EACXQ,EAAeI,CAAW,CAC1C,EACkBS,EAAQJ,EAAE,UAAUC,EAAQN,EAAY,MAAM,EAC9CU,EAAc,CAAA,EAKlB,GAJIH,GACFG,EAAY,KAAKH,CAAM,EAEzBG,EAAY,KAAKF,CAAM,EACnBC,EAAO,CACT,IAAIE,EAAc,CAACF,CAAK,EACxBN,EAAWQ,CAAW,EACtBD,EAAY,KAAK,MAAMA,EAAaC,CAAW,CAC/D,CACkB,OAAOb,GAAU,UACnBP,EAAO,OAAO,MAAMA,EAAQ,CAACa,EAAG,CAAC,EAAE,OAAOM,CAAW,CAAC,EACtDN,GAAKM,EAAY,OAAS,GAE1BZ,EAAM,QAAUY,CAEhC,CACA,KAAiB,CACL,IAAIE,EAAUd,EAAM,QAChB,MAAM,QAAQc,CAAO,EACvBT,EAAWS,CAAO,EAElBT,EAAW,CAACS,CAAO,CAAC,CAElC,CACA,CACA,CACM,OAAAT,EAAWF,CAAc,EAClB,IAAI5B,EAAM,MACfO,EACAqB,EACA,YAAcrB,EACdK,CACR,CACA,CAMI,IAAI4B,EAAqB,CACvB,WAAY,GACZ,GAAI,GACJ,WAAY,GACZ,GAAI,GACJ,IAAK,GACL,IAAK,EACX,EACIxC,EAAM,MAAM,IAAI,iBAAkB,SAAUc,EAAK,CAC/C,GAAI,EAAEA,EAAI,YAAY0B,GACpB,OAQF,SAASC,EAAoBvB,EAAQ,CACnC,QAASa,EAAI,EAAGW,EAAIxB,EAAO,OAAQa,EAAIW,EAAGX,IAAK,CAC7C,IAAIN,EAAQP,EAAOa,CAAC,EACpB,GAAI,OAAON,GAAU,SAGrB,KAAIc,EAAUd,EAAM,QACpB,GAAI,CAAC,MAAM,QAAQc,CAAO,EAAG,CACvB,OAAOA,GAAY,UACrBE,EAAoB,CAACF,CAAO,CAAC,EAE/B,QACZ,CACU,GAAId,EAAM,OAAS,kBAAmB,CAepC,IAAIkB,EAAWJ,EAAQ,CAAC,EACxB,GACEA,EAAQ,SAAW,GACnB,OAAOI,GAAa,UACpBA,EAAS,OAAS,gBAClB,CAEA,IAAI/B,EAAOgC,EAAcD,CAAQ,EAC7BE,EAAQF,EAAS,MACjBpC,EAAW,MAAM,QAAQsC,CAAK,EAAIA,EAAM,CAAC,EAAIA,EAC7ChC,EAAUb,EAAM,UAAUO,CAAQ,EACtC,GAAI,CAACM,EAEH,SAEF0B,EAAQ,CAAC,EAAInB,EAAiBR,EAAMC,EAASN,CAAQ,CACnE,CACA,MACYkC,EAAoBF,CAAO,EAEvC,CACA,CACME,EAAoB3B,EAAI,MAAM,CACpC,CAAK,EAOD,SAAS8B,EAAcE,EAAO,CAC5B,OAAI,OAAOA,GAAU,SACZA,EACE,MAAM,QAAQA,CAAK,EACrBA,EAAM,IAAIF,CAAa,EAAE,KAAK,EAAE,EAEhCA,EAAcE,EAAM,OAAO,CAE1C,CACA,GAAK9C,CAAK,CACV","x_google_ignoreList":[0]}