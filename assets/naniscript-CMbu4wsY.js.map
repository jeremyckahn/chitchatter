{"version":3,"file":"naniscript-CMbu4wsY.js","sources":["../../node_modules/refractor/lang/naniscript.js"],"sourcesContent":["'use strict'\n\nmodule.exports = naniscript\nnaniscript.displayName = 'naniscript'\nnaniscript.aliases = []\nfunction naniscript(Prism) {\n  ;(function (Prism) {\n    var expressionDef = /\\{[^\\r\\n\\[\\]{}]*\\}/\n    var params = {\n      'quoted-string': {\n        pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n        alias: 'operator'\n      },\n      'command-param-id': {\n        pattern: /(\\s)\\w+:/,\n        lookbehind: true,\n        alias: 'property'\n      },\n      'command-param-value': [\n        {\n          pattern: expressionDef,\n          alias: 'selector'\n        },\n        {\n          pattern: /([\\t ])\\S+/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'operator'\n        },\n        {\n          pattern: /\\S(?:.*\\S)?/,\n          alias: 'operator'\n        }\n      ]\n    }\n    Prism.languages.naniscript = {\n      // ; ...\n      comment: {\n        pattern: /^([\\t ]*);.*/m,\n        lookbehind: true\n      },\n      // > ...\n      // Define is a control line starting with '>' followed by a word, a space and a text.\n      define: {\n        pattern: /^>.+/m,\n        alias: 'tag',\n        inside: {\n          value: {\n            pattern: /(^>\\w+[\\t ]+)(?!\\s)[^{}\\r\\n]+/,\n            lookbehind: true,\n            alias: 'operator'\n          },\n          key: {\n            pattern: /(^>)\\w+/,\n            lookbehind: true\n          }\n        }\n      },\n      // # ...\n      label: {\n        pattern: /^([\\t ]*)#[\\t ]*\\w+[\\t ]*$/m,\n        lookbehind: true,\n        alias: 'regex'\n      },\n      command: {\n        pattern: /^([\\t ]*)@\\w+(?=[\\t ]|$).*/m,\n        lookbehind: true,\n        alias: 'function',\n        inside: {\n          'command-name': /^@\\w+/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'command-params': {\n            pattern: /\\s*\\S[\\s\\S]*/,\n            inside: params\n          }\n        }\n      },\n      // Generic is any line that doesn't start with operators: ;>#@\n      'generic-text': {\n        pattern: /(^[ \\t]*)[^#@>;\\s].*/m,\n        lookbehind: true,\n        alias: 'punctuation',\n        inside: {\n          // \\{ ... \\} ... \\[ ... \\] ... \\\"\n          'escaped-char': /\\\\[{}\\[\\]\"]/,\n          expression: {\n            pattern: expressionDef,\n            greedy: true,\n            alias: 'selector'\n          },\n          'inline-command': {\n            pattern: /\\[[\\t ]*\\w[^\\r\\n\\[\\]]*\\]/,\n            greedy: true,\n            alias: 'function',\n            inside: {\n              'command-params': {\n                pattern: /(^\\[[\\t ]*\\w+\\b)[\\s\\S]+(?=\\]$)/,\n                lookbehind: true,\n                inside: params\n              },\n              'command-param-name': {\n                pattern: /^(\\[[\\t ]*)\\w+/,\n                lookbehind: true,\n                alias: 'name'\n              },\n              'start-stop-char': /[\\[\\]]/\n            }\n          }\n        }\n      }\n    }\n    Prism.languages.nani = Prism.languages['naniscript']\n    /** @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token */\n    /**\n     * This hook is used to validate generic-text tokens for balanced brackets.\n     * Mark token as bad-line when contains not balanced brackets: {},[]\n     */\n    Prism.hooks.add('after-tokenize', function (env) {\n      /** @type {(Token | string)[]} */\n      var tokens = env.tokens\n      tokens.forEach(function (token) {\n        if (typeof token !== 'string' && token.type === 'generic-text') {\n          var content = getTextContent(token)\n          if (!isBracketsBalanced(content)) {\n            token.type = 'bad-line'\n            token.content = content\n          }\n        }\n      })\n    })\n    /**\n     * @param {string} input\n     * @returns {boolean}\n     */\n    function isBracketsBalanced(input) {\n      var brackets = '[]{}'\n      var stack = []\n      for (var i = 0; i < input.length; i++) {\n        var bracket = input[i]\n        var bracketsIndex = brackets.indexOf(bracket)\n        if (bracketsIndex !== -1) {\n          if (bracketsIndex % 2 === 0) {\n            stack.push(bracketsIndex + 1)\n          } else if (stack.pop() !== bracketsIndex) {\n            return false\n          }\n        }\n      }\n      return stack.length === 0\n    }\n    /**\n     * @param {string | Token | (string | Token)[]} token\n     * @returns {string}\n     */\n    function getTextContent(token) {\n      if (typeof token === 'string') {\n        return token\n      } else if (Array.isArray(token)) {\n        return token.map(getTextContent).join('')\n      } else {\n        return getTextContent(token.content)\n      }\n    }\n  })(Prism)\n}\n"],"names":["naniscript_1","naniscript","Prism","expressionDef","params","env","tokens","token","content","getTextContent","isBracketsBalanced","input","brackets","stack","i","bracket","bracketsIndex"],"mappings":"qaAEAA,EAAiBC,EACjBA,EAAW,YAAc,aACzBA,EAAW,QAAU,CAAA,EACrB,SAASA,EAAWC,EAAO,EACvB,SAAUA,EAAO,CACjB,IAAIC,EAAgB,qBAChBC,EAAS,CACX,gBAAiB,CACf,QAAS,oBACT,MAAO,YAET,mBAAoB,CAClB,QAAS,WACT,WAAY,GACZ,MAAO,YAET,sBAAuB,CACrB,CACE,QAASD,EACT,MAAO,YAET,CACE,QAAS,aACT,WAAY,GACZ,OAAQ,GACR,MAAO,YAET,CACE,QAAS,cACT,MAAO,UACjB,CACA,CACA,EACID,EAAM,UAAU,WAAa,CAE3B,QAAS,CACP,QAAS,gBACT,WAAY,IAId,OAAQ,CACN,QAAS,QACT,MAAO,MACP,OAAQ,CACN,MAAO,CACL,QAAS,gCACT,WAAY,GACZ,MAAO,YAET,IAAK,CACH,QAAS,UACT,WAAY,EACxB,CACA,GAGM,MAAO,CACL,QAAS,8BACT,WAAY,GACZ,MAAO,SAET,QAAS,CACP,QAAS,8BACT,WAAY,GACZ,MAAO,WACP,OAAQ,CACN,eAAgB,QAChB,WAAY,CACV,QAASC,EACT,OAAQ,GACR,MAAO,YAET,iBAAkB,CAChB,QAAS,eACT,OAAQC,CACpB,CACA,GAGM,eAAgB,CACd,QAAS,wBACT,WAAY,GACZ,MAAO,cACP,OAAQ,CAEN,eAAgB,cAChB,WAAY,CACV,QAASD,EACT,OAAQ,GACR,MAAO,YAET,iBAAkB,CAChB,QAAS,2BACT,OAAQ,GACR,MAAO,WACP,OAAQ,CACN,iBAAkB,CAChB,QAAS,iCACT,WAAY,GACZ,OAAQC,GAEV,qBAAsB,CACpB,QAAS,iBACT,WAAY,GACZ,MAAO,QAET,kBAAmB,QACjC,CACA,CACA,CACA,CACA,EACIF,EAAM,UAAU,KAAOA,EAAM,UAAU,WAMvCA,EAAM,MAAM,IAAI,iBAAkB,SAAUG,EAAK,CAE/C,IAAIC,EAASD,EAAI,OACjBC,EAAO,QAAQ,SAAUC,EAAO,CAC9B,GAAI,OAAOA,GAAU,UAAYA,EAAM,OAAS,eAAgB,CAC9D,IAAIC,EAAUC,EAAeF,CAAK,EAC7BG,EAAmBF,CAAO,IAC7BD,EAAM,KAAO,WACbA,EAAM,QAAUC,EAE5B,CACA,CAAO,CACP,CAAK,EAKD,SAASE,EAAmBC,EAAO,CAGjC,QAFIC,EAAW,OACXC,EAAQ,CAAA,EACHC,EAAI,EAAGA,EAAIH,EAAM,OAAQG,IAAK,CACrC,IAAIC,EAAUJ,EAAMG,CAAC,EACjBE,EAAgBJ,EAAS,QAAQG,CAAO,EAC5C,GAAIC,IAAkB,IACpB,GAAIA,EAAgB,IAAM,EACxBH,EAAM,KAAKG,EAAgB,CAAC,UACnBH,EAAM,IAAG,IAAOG,EACzB,MAAO,GAGnB,CACM,OAAOH,EAAM,SAAW,CAC9B,CAKI,SAASJ,EAAeF,EAAO,CAC7B,OAAI,OAAOA,GAAU,SACZA,EACE,MAAM,QAAQA,CAAK,EACrBA,EAAM,IAAIE,CAAc,EAAE,KAAK,EAAE,EAEjCA,EAAeF,EAAM,OAAO,CAE3C,CACA,GAAKL,CAAK,CACV","x_google_ignoreList":[0]}